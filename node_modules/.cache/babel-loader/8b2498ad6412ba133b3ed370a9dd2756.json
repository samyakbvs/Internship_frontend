{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _omit = _interopRequireDefault(require(\"lodash/omit\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _elementType = _interopRequireDefault(require(\"prop-types-extra/lib/elementType\"));\n\nvar _topeka = require(\"topeka\");\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _memoizeOne = _interopRequireDefault(require(\"memoize-one\"));\n\nvar _shallowequal = _interopRequireDefault(require(\"shallowequal\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _isNativeType = _interopRequireDefault(require(\"./utils/isNativeType\"));\n\nvar _ErrorUtils = require(\"./utils/ErrorUtils\");\n\nvar _Contexts = require(\"./Contexts\");\n\nvar _createEventHandler = _interopRequireDefault(require(\"./utils/createEventHandler\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction notify(handler, args) {\n  handler && handler.apply(void 0, args);\n}\n\nfunction resolveToNativeType(type) {\n  if (type === 'boolean') return 'checkbox';\n  return (0, _isNativeType.default)(type) ? type : 'text';\n}\n\nfunction getValueProps(type, value, props) {\n  if (value == null) value = '';\n\n  switch (type) {\n    case 'radio':\n    case 'checkbox':\n      return {\n        value: props.value,\n        checked: value\n      };\n\n    case 'file':\n      return {\n        value: ''\n      };\n\n    default:\n      return {\n        value: value\n      };\n  }\n}\n\nfunction isFilterErrorsEqual(_ref, _ref2) {\n  var a = _ref[0];\n  var b = _ref2[0];\n  var isEqual = (a.errors === b.errors || (0, _shallowequal.default)(a.errors, b.errors)) && a.names === b.names && a.mapErrors === b.mapErrors; // !isEqual && console.log('filter equalg cm \"\"', a.errors, b.errors)\n\n  return isEqual;\n}\n/**\n * The Field Component renders a form control and handles input value updates and validations.\n * Changes to the Field value are automatically propagated back up to the containing Form\n * Component.\n *\n * Fields provide a light abstraction over normal input components where values and onChange handlers\n * are take care of for you. Beyond that they just render the input for their type, Fields whille pass along\n * any props and children to the input so you can easily configure new input types.\n *\n * ```jsx { \"editable\": true }\n * <Form\n *   noValidate\n *   schema={modelSchema}\n *   defaultValue={{\n *     name: { first: 'Sally'},\n *     colorID: 0\n *   }}\n * >\n *     <label htmlFor=\"example-firstName\">Name</label>\n *     <Form.Field\n *       name='name.first'\n *       placeholder='First name'\n *       id=\"example-firstName\"\n *     />\n *     <label htmlFor=\"example-color\">Favorite Color</label>\n *     <Form.Field\n *       as='select'\n *       name='colorId'\n *       id=\"example-color\"\n *     >\n *       <option value={0}>Red</option>\n *       <option value={1}>Yellow</option>\n *       <option value={2}>Blue</option>\n *       <option value={3}>other</option>\n *     </Form.Field>\n *   <Form.Submit type='submit'>Submit</Form.Submit>\n * </Form>\n * ```\n *\n * In addition to injecting Field components with events and the field `value`, a\n * special prop called `meta` is also provided to all Field renderer components. `meta`\n * contains a bunch of helpful context as well some methods for doing advanced field operations.\n *\n * ```ts\n * interface Meta {\n *   value: any;                // the Field Value\n *   valid: boolean;            // Whether the field is currently valid\n *   invalid: boolean;          // inverse of valid\n *   touched: boolean:          // whether the field has been touched yet\n *   errors: ErrorObjectMap;    // the errors for this field and any neted fields\n *   schema?: YupSchema;        // The schema for this field\n *   context: YupSchemaContext; // the yup context object\n *   // onError allows manually _replacing_ errors for the Field `name`\n *   // any existing errors for this path will be removed first\n *   onError(errors: ErrorObjectMap): void\n * }\n * ```\n *\n */\n\n\nvar Field =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inheritsLoose(Field, _React$PureComponent);\n\n  function Field() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n\n    _this.handleFieldError = function (errors) {\n      var _this$props = _this.props,\n          name = _this$props.name,\n          actions = _this$props.actions;\n      return actions.onFieldError(name, errors);\n    };\n\n    _this.eventHandlers = {};\n    _this.getEventHandlers = (0, _createEventHandler.default)(function (event) {\n      return function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        notify(_this.props[event], args);\n        notify(_this.props.bindingProps[event], args);\n\n        _this.handleValidateField(event, args);\n      };\n    });\n    _this.memoFilterAndMapErrors = (0, _memoizeOne.default)(_ErrorUtils.filterAndMapErrors, isFilterErrorsEqual);\n    return _this;\n  }\n\n  var _proto = Field.prototype;\n\n  _proto.buildMeta = function buildMeta() {\n    var _this$props2 = this.props,\n        name = _this$props2.name,\n        touched = _this$props2.touched,\n        exclusive = _this$props2.exclusive,\n        errors = _this$props2.errors,\n        actions = _this$props2.actions,\n        yupContext = _this$props2.yupContext,\n        submits = _this$props2.submits,\n        bindingProps = _this$props2.bindingProps,\n        _this$props2$errorCla = _this$props2.errorClass,\n        errorClass = _this$props2$errorCla === void 0 ? _config.default.errorClass : _this$props2$errorCla;\n    var schema;\n\n    try {\n      schema = actions.getSchemaForPath && name && actions.getSchemaForPath(name);\n    } catch (err) {}\n    /* ignore */\n    // prettier-ignore\n\n\n    var meta = _extends({\n      schema: schema,\n      touched: touched,\n      errorClass: errorClass,\n      context: yupContext,\n      onError: this.handleFieldError\n    }, submits);\n\n    var filteredErrors = this.memoFilterAndMapErrors({\n      errors: errors,\n      names: name,\n      mapErrors: !exclusive ? _ErrorUtils.inclusiveMapErrors : undefined\n    });\n    meta.errors = filteredErrors;\n    meta.invalid = !!Object.keys(filteredErrors).length;\n    meta.valid = !meta.invalid; // put the original value on meta incase the coerced one differs\n\n    meta.value = bindingProps.value;\n    return meta;\n  };\n\n  _proto.handleValidateField = function handleValidateField(event, args) {\n    var _this$props3 = this.props,\n        name = _this$props3.name,\n        validates = _this$props3.validates,\n        actions = _this$props3.actions,\n        noValidate = _this$props3.noValidate;\n    if (noValidate || !actions) return;\n    var fieldsToValidate = validates != null ? [].concat(validates) : [name];\n    actions.onValidate(fieldsToValidate, event, args);\n  };\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        name = _this$props4.name,\n        type = _this$props4.type,\n        children = _this$props4.children,\n        className = _this$props4.className,\n        fieldRef = _this$props4.fieldRef,\n        noMeta = _this$props4.noMeta,\n        noValidate = _this$props4.noValidate,\n        noResolveType = _this$props4.noResolveType,\n        bindingProps = _this$props4.bindingProps,\n        actions = _this$props4.actions,\n        Input = _this$props4.as,\n        asProps = _this$props4.asProps,\n        _this$props4$events = _this$props4.events,\n        events = _this$props4$events === void 0 ? _config.default.events : _this$props4$events;\n    var meta = this.buildMeta();\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(!actions || noValidate || !name || meta.schema, \"There is no corresponding schema defined for this field: \\\"\" + name + \"\\\" \" + \"Each Field's `name` prop must be a valid path defined by the parent Form schema\") : void 0;\n    }\n\n    var resolvedType = type || meta.schema && meta.schema._type;\n    meta.resolvedType = resolvedType; // console.log(meta, events(meta))\n\n    var eventHandlers = this.getEventHandlers(typeof events === 'function' ? events(meta) : events);\n\n    var fieldProps = _extends({\n      name: name,\n      type: type\n    }, (0, _omit.default)(this.props, Object.keys(Field.propTypes)), bindingProps, eventHandlers); // ensure that no inputs are left uncontrolled\n\n\n    var value = bindingProps.value === undefined ? null : bindingProps.value;\n    fieldProps.value = value;\n\n    if (!noValidate) {\n      fieldProps.className = (0, _classnames.default)(className, meta.invalid && meta.errorClass);\n    }\n\n    if (!noMeta) fieldProps.meta = meta;\n    if (fieldRef) fieldProps.ref = fieldRef; // Escape hatch for more complex Field types.\n\n    if (typeof children === 'function') {\n      fieldProps.type = resolveToNativeType(resolvedType);\n      return children(fieldProps);\n    } // in the case of a plain input do some schema -> native type mapping\n\n\n    if (Input === 'input' && !type) {\n      fieldProps.type = resolveToNativeType(resolvedType);\n    }\n\n    return _react.default.createElement(Input, _extends({}, asProps, fieldProps, getValueProps(fieldProps.type, value, this.props)), children);\n  };\n\n  return Field;\n}(_react.default.PureComponent);\n\nField.defaultProps = {\n  as: 'input',\n  exclusive: false,\n  fieldRef: null\n};\nField.propTypes = {\n  /**\n   * The Field name, which should be path corresponding to a specific form `value` path.\n   *\n   * ```js\n   * // given the form value\n   * value = {\n   *   name: { first: '' }\n   *   languages: ['english', 'spanish']\n   * }\n   *\n   * // the path \"name.first\" would update the \"first\" property of the form value\n   * <Form.Field name='name.first' />\n   *\n   * // use indexes for paths that cross arrays\n   * <Form.Field name='languages[0]' />\n   *\n   * ```\n   */\n  name: _propTypes.default.string.isRequired,\n\n  /**\n   * The Component Input the form should render. You can sepcify a native element such as 'textbox' or 'select'\n   * or provide a Component type class directly. When no type is provided the Field will attempt determine\n   * the correct input from the Field's schema. A Field corresponding to a `yup.number()`\n   * will render a `type='number'` input by default.\n   *\n   * ```jsx { \"editable\": true }\n   * <Form noValidate schema={modelSchema}>\n   *   Use the schema to determine type\n   *   <Form.Field\n   *     name='dateOfBirth'\n   *     placeholder='date'\n   *   />\n   *\n   *   Override it!\n   *   <Form.Field\n   *     name='dateOfBirth'\n   *     type='time'\n   *     placeholder='time only'\n   *   />\n   *\n   *   Use a custom Component\n   *   (need native 'datetime' support to see it)\n   *   <Form.Field\n   *     name='dateOfBirth'\n   *     as={MyDateInput}/>\n   *\n   * </Form>\n   * ```\n   *\n   * Custom Inputs should comply with the basic input api contract: set a value via a `value` prop and\n   * broadcast changes to that value via an `onChange` handler.\n   */\n  as: _propTypes.default.oneOfType([_elementType.default, _propTypes.default.string]),\n\n  /**\n   * Event name or array of event names that the Field should trigger a validation.\n   * You can also specify a function that receives the Field `meta` object and returns an array of events\n   * in order to change validation strategies based on validity.\n   */\n  events: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.func]),\n\n  /**\n   * Customize how the Field value maps to the overall Form `value`.\n   * `mapFromValue` can be a a string property name or a function that returns a\n   * value for `name`'d path, allowing you to set commuted values from the Field.\n   *\n   * ```js\n   * <Form.Field\n   *   name='name'\n   *   mapFromValue={fieldValue => fieldValue.first + ' ' + fieldValue.last}\n   * />\n   * ```\n   *\n   * You can also provide an object hash, mapping paths of the Form `value`\n   * to fields in the field value using a string field name, or a function accessor.\n   *\n   * ```js { \"editable\": true }\n   * <Form\n   *   schema={modelSchema}\n   *   defaultValue={modelSchema.default()}\n   * >\n   *   <label htmlFor=\"ex-mapToValue-firstName\">Name</label>\n   *   <Form.Field\n   *     name='name.first'\n   *     placeholder='First name'\n   *     id=\"ex-mapToValue-firstName\"\n   *   />\n   *\n   *   <label htmlFor=\"ex-mapToValue-dob\">Date of Birth</label>\n   *   <Form.Field\n   *     name='dateOfBirth'\n   *     id=\"ex-mapToValue-dob\"\n   *     mapFromValue={{\n   *       'dateOfBirth': date => date,\n   *       'age': date =>\n   *         (new Date()).getFullYear() - date.getFullYear()\n   *   }}/>\n   *\n   *   <label htmlFor=\"ex-mapToValue-age\">Age</label>\n   *   <Form.Field name='age' id=\"ex-mapToValue-age\"/>\n   *\n   *   <Form.Submit type='submit'>Submit</Form.Submit>\n   * </Form>\n   * ```\n   */\n  mapFromValue: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string, _propTypes.default.object]),\n\n  /**\n   * Map the Form value to the Field value. By default\n   * the `name` of the Field is used to extract the relevant\n   * property from the Form value.\n   *\n   * ```js\n   * <Form.Field\n   *   name='location'\n   *   type=\"dropdownlist\"\n   *   mapToValue={model=> pick(model, 'location', 'locationId')}\n   * />\n   * ```\n   */\n  mapToValue: _propTypes.default.func,\n\n  /**\n   * The css class added to the Field Input when it fails validation\n   */\n  errorClass: _propTypes.default.string,\n\n  /**\n   * Tells the Field to trigger validation for specific paths.\n   * Useful when used in conjuction with a `mapFromValue` hash that updates more than one value, or\n   * if you want to trigger validation for the parent path as well.\n   *\n   * > NOTE! This overrides the default behavior of validating the field itself by `name`,\n   * include the `name` if you want the field to validate itself.\n   *\n   * ```jsx\n   * <Form.Field name='name.first' validates=\"name.last\" />\n   * <Form.Field name='name' validates={['name', 'surname']} />\n   * ```\n   */\n  validates: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]),\n\n  /**\n   * Indicates whether child fields of the named field\n   * affect the active state ofthe field.\n   *\n   * ```js\n   * -> 'names'\n   * -> 'names.first'\n   * -> 'names.last'\n   * ```\n   *\n   * Are all considered \"part\" of a field named `'names'` by default.\n   */\n  exclusive: _propTypes.default.bool,\n\n  /**\n   * Disables validation for the Field.\n   */\n  noValidate: _propTypes.default.bool,\n\n  /**\n   * When children is the traditional react element or nodes, they are\n   * passed through as-is to the Field `type` component.\n   *\n   * ```jsx\n   * <Field type='select'>\n   *   <option>red</option>\n   *   <option>red</option>\n   * </Field>\n   * ```\n   *\n   * When `children` is a function, its called with the processed field\n   * props and the resolved Field Input component, for more advanced use cases\n   *\n   * ```jsx\n   * <Field name='birthDate'>\n   *  {(props, Input) =>\n   *    <DataProvider>\n   *      <Input {...props} />\n   *    </DataProvider>\n   *  }\n   * </Field>\n   * ```\n   */\n  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),\n\n  /**\n   * Instruct the field to not inject the `meta` prop into the input\n   */\n  noMeta: _propTypes.default.bool,\n\n  /**\n   * Attach a ref to the rendered input component\n   */\n  fieldRef: _propTypes.default.func,\n\n  /** @private */\n  noResolveType: _propTypes.default.bool,\n\n  /** @private */\n  bindingProps: _propTypes.default.object,\n\n  /** @private */\n  yupContext: _propTypes.default.any,\n\n  /** @private */\n  errors: _propTypes.default.object,\n\n  /** @private */\n  touched: _propTypes.default.bool,\n\n  /** @private */\n  actions: _propTypes.default.object,\n\n  /** @private */\n  submits: _propTypes.default.shape({\n    submitAttempts: _propTypes.default.number,\n    submitCount: _propTypes.default.number,\n    submitting: _propTypes.default.bool\n  })\n};\n\nvar _default = (0, _Contexts.withState)(function (ctx, props, ref) {\n  var mapToValue = props.mapToValue,\n      mapFromValue = props.mapFromValue,\n      name = props.name,\n      fieldRef = props.fieldRef,\n      rest = _objectWithoutPropertiesLoose(props, [\"mapToValue\", \"mapFromValue\", \"name\", \"fieldRef\"]);\n\n  return _react.default.createElement(_topeka.Binding, {\n    bindTo: mapToValue || name,\n    mapValue: mapFromValue\n  }, function (bindingProps) {\n    return _react.default.createElement(_Contexts.FormActionsContext.Consumer, null, function (actions) {\n      var _extends2;\n\n      return _react.default.createElement(Field, _extends({}, rest, (_extends2 = {\n        name: name,\n        actions: actions,\n        fieldRef: fieldRef || ref,\n        bindingProps: bindingProps,\n        errors: ctx.errors,\n        yupContext: ctx.yupContext,\n        noValidate: ctx.noValidate,\n        submits: ctx.submits,\n        touched: ctx.touched[name]\n      }, _extends2[\"noValidate\"] = props.noValidate == null ? ctx.noValidate : props.noValidate, _extends2)));\n    });\n  });\n}, _Contexts.FORM_DATA.ERRORS | _Contexts.FORM_DATA.TOUCHED | _Contexts.FORM_DATA.SUBMITS | _Contexts.FORM_DATA.YUP_CONTEXT | _Contexts.FORM_DATA.NO_VALIDATE);\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/samyakjain/Desktop/Metacube/Internship_frontend/node_modules/react-formal/lib/Field.js"],"names":["exports","__esModule","default","_classnames","_interopRequireDefault","require","_omit","_react","_propTypes","_elementType","_topeka","_warning","_memoizeOne","_shallowequal","_config","_isNativeType","_ErrorUtils","_Contexts","_createEventHandler","obj","_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","Object","keys","key","i","length","indexOf","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","_inheritsLoose","subClass","superClass","create","constructor","__proto__","notify","handler","args","resolveToNativeType","type","getValueProps","value","props","checked","isFilterErrorsEqual","_ref","_ref2","a","b","isEqual","errors","names","mapErrors","Field","_React$PureComponent","_this","_len","Array","_key","concat","handleFieldError","_this$props","name","actions","onFieldError","eventHandlers","getEventHandlers","event","_len2","_key2","bindingProps","handleValidateField","memoFilterAndMapErrors","filterAndMapErrors","_proto","buildMeta","_this$props2","touched","exclusive","yupContext","submits","_this$props2$errorCla","errorClass","schema","getSchemaForPath","err","meta","context","onError","filteredErrors","inclusiveMapErrors","undefined","invalid","valid","_this$props3","validates","noValidate","fieldsToValidate","onValidate","render","_this$props4","children","className","fieldRef","noMeta","noResolveType","Input","as","asProps","_this$props4$events","events","process","env","NODE_ENV","resolvedType","_type","fieldProps","propTypes","ref","createElement","PureComponent","defaultProps","string","isRequired","oneOfType","arrayOf","func","mapFromValue","object","mapToValue","bool","node","any","shape","submitAttempts","number","submitCount","submitting","_default","withState","ctx","rest","Binding","bindTo","mapValue","FormActionsContext","Consumer","_extends2","FORM_DATA","ERRORS","TOUCHED","SUBMITS","YUP_CONTEXT","NO_VALIDATE","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _omit = _interopRequireDefault(require(\"lodash/omit\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _elementType = _interopRequireDefault(require(\"prop-types-extra/lib/elementType\"));\n\nvar _topeka = require(\"topeka\");\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _memoizeOne = _interopRequireDefault(require(\"memoize-one\"));\n\nvar _shallowequal = _interopRequireDefault(require(\"shallowequal\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nvar _isNativeType = _interopRequireDefault(require(\"./utils/isNativeType\"));\n\nvar _ErrorUtils = require(\"./utils/ErrorUtils\");\n\nvar _Contexts = require(\"./Contexts\");\n\nvar _createEventHandler = _interopRequireDefault(require(\"./utils/createEventHandler\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nfunction notify(handler, args) {\n  handler && handler.apply(void 0, args);\n}\n\nfunction resolveToNativeType(type) {\n  if (type === 'boolean') return 'checkbox';\n  return (0, _isNativeType.default)(type) ? type : 'text';\n}\n\nfunction getValueProps(type, value, props) {\n  if (value == null) value = '';\n\n  switch (type) {\n    case 'radio':\n    case 'checkbox':\n      return {\n        value: props.value,\n        checked: value\n      };\n\n    case 'file':\n      return {\n        value: ''\n      };\n\n    default:\n      return {\n        value: value\n      };\n  }\n}\n\nfunction isFilterErrorsEqual(_ref, _ref2) {\n  var a = _ref[0];\n  var b = _ref2[0];\n  var isEqual = (a.errors === b.errors || (0, _shallowequal.default)(a.errors, b.errors)) && a.names === b.names && a.mapErrors === b.mapErrors; // !isEqual && console.log('filter equalg cm \"\"', a.errors, b.errors)\n\n  return isEqual;\n}\n/**\n * The Field Component renders a form control and handles input value updates and validations.\n * Changes to the Field value are automatically propagated back up to the containing Form\n * Component.\n *\n * Fields provide a light abstraction over normal input components where values and onChange handlers\n * are take care of for you. Beyond that they just render the input for their type, Fields whille pass along\n * any props and children to the input so you can easily configure new input types.\n *\n * ```jsx { \"editable\": true }\n * <Form\n *   noValidate\n *   schema={modelSchema}\n *   defaultValue={{\n *     name: { first: 'Sally'},\n *     colorID: 0\n *   }}\n * >\n *     <label htmlFor=\"example-firstName\">Name</label>\n *     <Form.Field\n *       name='name.first'\n *       placeholder='First name'\n *       id=\"example-firstName\"\n *     />\n *     <label htmlFor=\"example-color\">Favorite Color</label>\n *     <Form.Field\n *       as='select'\n *       name='colorId'\n *       id=\"example-color\"\n *     >\n *       <option value={0}>Red</option>\n *       <option value={1}>Yellow</option>\n *       <option value={2}>Blue</option>\n *       <option value={3}>other</option>\n *     </Form.Field>\n *   <Form.Submit type='submit'>Submit</Form.Submit>\n * </Form>\n * ```\n *\n * In addition to injecting Field components with events and the field `value`, a\n * special prop called `meta` is also provided to all Field renderer components. `meta`\n * contains a bunch of helpful context as well some methods for doing advanced field operations.\n *\n * ```ts\n * interface Meta {\n *   value: any;                // the Field Value\n *   valid: boolean;            // Whether the field is currently valid\n *   invalid: boolean;          // inverse of valid\n *   touched: boolean:          // whether the field has been touched yet\n *   errors: ErrorObjectMap;    // the errors for this field and any neted fields\n *   schema?: YupSchema;        // The schema for this field\n *   context: YupSchemaContext; // the yup context object\n *   // onError allows manually _replacing_ errors for the Field `name`\n *   // any existing errors for this path will be removed first\n *   onError(errors: ErrorObjectMap): void\n * }\n * ```\n *\n */\n\n\nvar Field =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inheritsLoose(Field, _React$PureComponent);\n\n  function Field() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;\n\n    _this.handleFieldError = function (errors) {\n      var _this$props = _this.props,\n          name = _this$props.name,\n          actions = _this$props.actions;\n      return actions.onFieldError(name, errors);\n    };\n\n    _this.eventHandlers = {};\n    _this.getEventHandlers = (0, _createEventHandler.default)(function (event) {\n      return function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        notify(_this.props[event], args);\n        notify(_this.props.bindingProps[event], args);\n\n        _this.handleValidateField(event, args);\n      };\n    });\n    _this.memoFilterAndMapErrors = (0, _memoizeOne.default)(_ErrorUtils.filterAndMapErrors, isFilterErrorsEqual);\n    return _this;\n  }\n\n  var _proto = Field.prototype;\n\n  _proto.buildMeta = function buildMeta() {\n    var _this$props2 = this.props,\n        name = _this$props2.name,\n        touched = _this$props2.touched,\n        exclusive = _this$props2.exclusive,\n        errors = _this$props2.errors,\n        actions = _this$props2.actions,\n        yupContext = _this$props2.yupContext,\n        submits = _this$props2.submits,\n        bindingProps = _this$props2.bindingProps,\n        _this$props2$errorCla = _this$props2.errorClass,\n        errorClass = _this$props2$errorCla === void 0 ? _config.default.errorClass : _this$props2$errorCla;\n    var schema;\n\n    try {\n      schema = actions.getSchemaForPath && name && actions.getSchemaForPath(name);\n    } catch (err) {}\n    /* ignore */\n    // prettier-ignore\n\n\n    var meta = _extends({\n      schema: schema,\n      touched: touched,\n      errorClass: errorClass,\n      context: yupContext,\n      onError: this.handleFieldError\n    }, submits);\n\n    var filteredErrors = this.memoFilterAndMapErrors({\n      errors: errors,\n      names: name,\n      mapErrors: !exclusive ? _ErrorUtils.inclusiveMapErrors : undefined\n    });\n    meta.errors = filteredErrors;\n    meta.invalid = !!Object.keys(filteredErrors).length;\n    meta.valid = !meta.invalid; // put the original value on meta incase the coerced one differs\n\n    meta.value = bindingProps.value;\n    return meta;\n  };\n\n  _proto.handleValidateField = function handleValidateField(event, args) {\n    var _this$props3 = this.props,\n        name = _this$props3.name,\n        validates = _this$props3.validates,\n        actions = _this$props3.actions,\n        noValidate = _this$props3.noValidate;\n    if (noValidate || !actions) return;\n    var fieldsToValidate = validates != null ? [].concat(validates) : [name];\n    actions.onValidate(fieldsToValidate, event, args);\n  };\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        name = _this$props4.name,\n        type = _this$props4.type,\n        children = _this$props4.children,\n        className = _this$props4.className,\n        fieldRef = _this$props4.fieldRef,\n        noMeta = _this$props4.noMeta,\n        noValidate = _this$props4.noValidate,\n        noResolveType = _this$props4.noResolveType,\n        bindingProps = _this$props4.bindingProps,\n        actions = _this$props4.actions,\n        Input = _this$props4.as,\n        asProps = _this$props4.asProps,\n        _this$props4$events = _this$props4.events,\n        events = _this$props4$events === void 0 ? _config.default.events : _this$props4$events;\n    var meta = this.buildMeta();\n\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(!actions || noValidate || !name || meta.schema, \"There is no corresponding schema defined for this field: \\\"\" + name + \"\\\" \" + \"Each Field's `name` prop must be a valid path defined by the parent Form schema\") : void 0;\n    }\n\n    var resolvedType = type || meta.schema && meta.schema._type;\n    meta.resolvedType = resolvedType; // console.log(meta, events(meta))\n\n    var eventHandlers = this.getEventHandlers(typeof events === 'function' ? events(meta) : events);\n\n    var fieldProps = _extends({\n      name: name,\n      type: type\n    }, (0, _omit.default)(this.props, Object.keys(Field.propTypes)), bindingProps, eventHandlers); // ensure that no inputs are left uncontrolled\n\n\n    var value = bindingProps.value === undefined ? null : bindingProps.value;\n    fieldProps.value = value;\n\n    if (!noValidate) {\n      fieldProps.className = (0, _classnames.default)(className, meta.invalid && meta.errorClass);\n    }\n\n    if (!noMeta) fieldProps.meta = meta;\n    if (fieldRef) fieldProps.ref = fieldRef; // Escape hatch for more complex Field types.\n\n    if (typeof children === 'function') {\n      fieldProps.type = resolveToNativeType(resolvedType);\n      return children(fieldProps);\n    } // in the case of a plain input do some schema -> native type mapping\n\n\n    if (Input === 'input' && !type) {\n      fieldProps.type = resolveToNativeType(resolvedType);\n    }\n\n    return _react.default.createElement(Input, _extends({}, asProps, fieldProps, getValueProps(fieldProps.type, value, this.props)), children);\n  };\n\n  return Field;\n}(_react.default.PureComponent);\n\nField.defaultProps = {\n  as: 'input',\n  exclusive: false,\n  fieldRef: null\n};\nField.propTypes = {\n  /**\n   * The Field name, which should be path corresponding to a specific form `value` path.\n   *\n   * ```js\n   * // given the form value\n   * value = {\n   *   name: { first: '' }\n   *   languages: ['english', 'spanish']\n   * }\n   *\n   * // the path \"name.first\" would update the \"first\" property of the form value\n   * <Form.Field name='name.first' />\n   *\n   * // use indexes for paths that cross arrays\n   * <Form.Field name='languages[0]' />\n   *\n   * ```\n   */\n  name: _propTypes.default.string.isRequired,\n\n  /**\n   * The Component Input the form should render. You can sepcify a native element such as 'textbox' or 'select'\n   * or provide a Component type class directly. When no type is provided the Field will attempt determine\n   * the correct input from the Field's schema. A Field corresponding to a `yup.number()`\n   * will render a `type='number'` input by default.\n   *\n   * ```jsx { \"editable\": true }\n   * <Form noValidate schema={modelSchema}>\n   *   Use the schema to determine type\n   *   <Form.Field\n   *     name='dateOfBirth'\n   *     placeholder='date'\n   *   />\n   *\n   *   Override it!\n   *   <Form.Field\n   *     name='dateOfBirth'\n   *     type='time'\n   *     placeholder='time only'\n   *   />\n   *\n   *   Use a custom Component\n   *   (need native 'datetime' support to see it)\n   *   <Form.Field\n   *     name='dateOfBirth'\n   *     as={MyDateInput}/>\n   *\n   * </Form>\n   * ```\n   *\n   * Custom Inputs should comply with the basic input api contract: set a value via a `value` prop and\n   * broadcast changes to that value via an `onChange` handler.\n   */\n  as: _propTypes.default.oneOfType([_elementType.default, _propTypes.default.string]),\n\n  /**\n   * Event name or array of event names that the Field should trigger a validation.\n   * You can also specify a function that receives the Field `meta` object and returns an array of events\n   * in order to change validation strategies based on validity.\n   */\n  events: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.func]),\n\n  /**\n   * Customize how the Field value maps to the overall Form `value`.\n   * `mapFromValue` can be a a string property name or a function that returns a\n   * value for `name`'d path, allowing you to set commuted values from the Field.\n   *\n   * ```js\n   * <Form.Field\n   *   name='name'\n   *   mapFromValue={fieldValue => fieldValue.first + ' ' + fieldValue.last}\n   * />\n   * ```\n   *\n   * You can also provide an object hash, mapping paths of the Form `value`\n   * to fields in the field value using a string field name, or a function accessor.\n   *\n   * ```js { \"editable\": true }\n   * <Form\n   *   schema={modelSchema}\n   *   defaultValue={modelSchema.default()}\n   * >\n   *   <label htmlFor=\"ex-mapToValue-firstName\">Name</label>\n   *   <Form.Field\n   *     name='name.first'\n   *     placeholder='First name'\n   *     id=\"ex-mapToValue-firstName\"\n   *   />\n   *\n   *   <label htmlFor=\"ex-mapToValue-dob\">Date of Birth</label>\n   *   <Form.Field\n   *     name='dateOfBirth'\n   *     id=\"ex-mapToValue-dob\"\n   *     mapFromValue={{\n   *       'dateOfBirth': date => date,\n   *       'age': date =>\n   *         (new Date()).getFullYear() - date.getFullYear()\n   *   }}/>\n   *\n   *   <label htmlFor=\"ex-mapToValue-age\">Age</label>\n   *   <Form.Field name='age' id=\"ex-mapToValue-age\"/>\n   *\n   *   <Form.Submit type='submit'>Submit</Form.Submit>\n   * </Form>\n   * ```\n   */\n  mapFromValue: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string, _propTypes.default.object]),\n\n  /**\n   * Map the Form value to the Field value. By default\n   * the `name` of the Field is used to extract the relevant\n   * property from the Form value.\n   *\n   * ```js\n   * <Form.Field\n   *   name='location'\n   *   type=\"dropdownlist\"\n   *   mapToValue={model=> pick(model, 'location', 'locationId')}\n   * />\n   * ```\n   */\n  mapToValue: _propTypes.default.func,\n\n  /**\n   * The css class added to the Field Input when it fails validation\n   */\n  errorClass: _propTypes.default.string,\n\n  /**\n   * Tells the Field to trigger validation for specific paths.\n   * Useful when used in conjuction with a `mapFromValue` hash that updates more than one value, or\n   * if you want to trigger validation for the parent path as well.\n   *\n   * > NOTE! This overrides the default behavior of validating the field itself by `name`,\n   * include the `name` if you want the field to validate itself.\n   *\n   * ```jsx\n   * <Form.Field name='name.first' validates=\"name.last\" />\n   * <Form.Field name='name' validates={['name', 'surname']} />\n   * ```\n   */\n  validates: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]),\n\n  /**\n   * Indicates whether child fields of the named field\n   * affect the active state ofthe field.\n   *\n   * ```js\n   * -> 'names'\n   * -> 'names.first'\n   * -> 'names.last'\n   * ```\n   *\n   * Are all considered \"part\" of a field named `'names'` by default.\n   */\n  exclusive: _propTypes.default.bool,\n\n  /**\n   * Disables validation for the Field.\n   */\n  noValidate: _propTypes.default.bool,\n\n  /**\n   * When children is the traditional react element or nodes, they are\n   * passed through as-is to the Field `type` component.\n   *\n   * ```jsx\n   * <Field type='select'>\n   *   <option>red</option>\n   *   <option>red</option>\n   * </Field>\n   * ```\n   *\n   * When `children` is a function, its called with the processed field\n   * props and the resolved Field Input component, for more advanced use cases\n   *\n   * ```jsx\n   * <Field name='birthDate'>\n   *  {(props, Input) =>\n   *    <DataProvider>\n   *      <Input {...props} />\n   *    </DataProvider>\n   *  }\n   * </Field>\n   * ```\n   */\n  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),\n\n  /**\n   * Instruct the field to not inject the `meta` prop into the input\n   */\n  noMeta: _propTypes.default.bool,\n\n  /**\n   * Attach a ref to the rendered input component\n   */\n  fieldRef: _propTypes.default.func,\n\n  /** @private */\n  noResolveType: _propTypes.default.bool,\n\n  /** @private */\n  bindingProps: _propTypes.default.object,\n\n  /** @private */\n  yupContext: _propTypes.default.any,\n\n  /** @private */\n  errors: _propTypes.default.object,\n\n  /** @private */\n  touched: _propTypes.default.bool,\n\n  /** @private */\n  actions: _propTypes.default.object,\n\n  /** @private */\n  submits: _propTypes.default.shape({\n    submitAttempts: _propTypes.default.number,\n    submitCount: _propTypes.default.number,\n    submitting: _propTypes.default.bool\n  })\n};\n\nvar _default = (0, _Contexts.withState)(function (ctx, props, ref) {\n  var mapToValue = props.mapToValue,\n      mapFromValue = props.mapFromValue,\n      name = props.name,\n      fieldRef = props.fieldRef,\n      rest = _objectWithoutPropertiesLoose(props, [\"mapToValue\", \"mapFromValue\", \"name\", \"fieldRef\"]);\n\n  return _react.default.createElement(_topeka.Binding, {\n    bindTo: mapToValue || name,\n    mapValue: mapFromValue\n  }, function (bindingProps) {\n    return _react.default.createElement(_Contexts.FormActionsContext.Consumer, null, function (actions) {\n      var _extends2;\n\n      return _react.default.createElement(Field, _extends({}, rest, (_extends2 = {\n        name: name,\n        actions: actions,\n        fieldRef: fieldRef || ref,\n        bindingProps: bindingProps,\n        errors: ctx.errors,\n        yupContext: ctx.yupContext,\n        noValidate: ctx.noValidate,\n        submits: ctx.submits,\n        touched: ctx.touched[name]\n      }, _extends2[\"noValidate\"] = props.noValidate == null ? ctx.noValidate : props.noValidate, _extends2)));\n    });\n  });\n}, _Contexts.FORM_DATA.ERRORS | _Contexts.FORM_DATA.TOUCHED | _Contexts.FORM_DATA.SUBMITS | _Contexts.FORM_DATA.YUP_CONTEXT | _Contexts.FORM_DATA.NO_VALIDATE);\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];"]},"metadata":{},"sourceType":"script"}